---
title: "FAIR convergence matrix"
author:
  - name: Gerhard Burger
    orcid: 0000-0003-1062-5576
format: html
---

```{r}
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(tidyverse, fs, pheatmap)

# from the tidyheatmaps package
# returns the indices at which the character values change 
# (for use in pheatmap's gap options)
bro_string_diff <- function (x) 
{
    (x[-length(x)] != x[-1]) %>% which(.)
}

fs::dir_create("output")
```

# Definitions

Assumption: treat superclass "https://w3id.org/fair/fip/terms/FAIR-Enabling-Resource" as "https://w3id.org/fair/fip/terms/Available-FAIR-Enabling-Resource"

```{r}
FER              <- "https://w3id.org/fair/fip/terms/FAIR-Enabling-Resource"
avail_FER        <- "https://w3id.org/fair/fip/terms/Available-FAIR-Enabling-Resource"
tbd_FER          <- "https://w3id.org/fair/fip/terms/FAIR-Enabling-Resource-to-be-Developed"
current_use_of   <- "https://w3id.org/fair/fip/terms/declares-current-use-of"
planned_repl_of  <- "https://w3id.org/fair/fip/terms/declares-planned-replacement-of"
planned_use_of   <- "https://w3id.org/fair/fip/terms/declares-planned-use-of"

# Copied from the Python code by Ruben Peeters
conv_vals <- tribble(
  ~resourcetype, ~rel, ~value,
  FER, current_use_of, 3,
  FER, planned_repl_of, 3,
  FER, planned_use_of, 2,
  avail_FER, current_use_of, 3,
  avail_FER, planned_repl_of, 3,
  avail_FER, planned_use_of, 2,
  tbd_FER, current_use_of, 1,
  tbd_FER, planned_repl_of, 0,
  tbd_FER, planned_use_of, 1
)

```

# Data import

```{r}
# read directly from the dsw-nanopub-api repo
data <- read_csv("https://raw.githubusercontent.com/peta-pico/dsw-nanopub-api/main/tables/new_matrix.csv")
# or from the new_matrix csv in this repo
# data <- read_csv("../new_matrix.csv")
```

```{r}
# QC FERs that are listed as the FER superclass
data |> 
  filter(resourcetype == FER) |>
  select(reslabel, resource_id_used) |>
  unique()

```


# Filtering

Select only data from communities with ENVRI as super community, and are still valid. However, by checking the enddate we probably filter out too many, so disabled for now :)

```{r}
filt_data <- data |> 
  filter(
    str_detect(sc, "ENVRI"),
    #enddate > now() 
    )
```

# Extract metadata for labeling

```{r}
communities <- filt_data |> 
  select(community, c, fip_index, fip_title) |>
  unique()

# QC
# ArgoGdac: one of these communities is an older version of the other
communities |> 
  select(community, c) |>
  unique() |>
  add_count(c) |>
  filter(n > 1)

# QC
# Multiple FIPs per community (multiple years) -> solution update filter to check for enddate, but then many FIPs get filtered out which are probably still valid
# EPOS_FIP_2019 has wrong enddate
communities |> 
  select(c, fip_title, fip_index) |>
  unique() |>
  add_count(c) |> 
  filter(n > 1) |> 
  arrange(c)

# Create some metadata for plot annotation
(princ_meta <-data |> 
  select(sort, q) |>
  unique() |>
  separate_wider_delim(q, delim = "-", names = c("sp", "type"), too_few = "align_start", cols_remove = F) |>
  replace_na(list(type = "MD")) |> 
  mutate(
    p = str_sub(sp, end = 1),
    across(c(sp,q,p,type), ~ factor(.x, levels = unique(.x)))) |>
    select(sort, q, p, sp, type)
  )

FAIR_abbrv <- c("F" = "Findability", "A" = "Accessibility", "I" = "Interoperability", "R" = "Reusability")
```

# Join data

```{r}
plot_data <- filt_data |> left_join(conv_vals, join_by(resourcetype, rel))
```

# Summarize data

In case of multiple FIPs per FIC, take the highest value for each FER over the FIPs

```{r}
test <- plot_data |> 
  unite("q_res", sort, q, res, remove = F) |>
  group_by(c, sort, res, q_res) |>
  summarise(value = max(value), .groups = "drop") |>
  arrange(q_res)
```

# Plot

Using pheatmap is a bit of a hack, probably ggplot + geom_tile is better

```{r}
# pivot to create matrix-like form
test |> pivot_wider(names_from = c, values_from = value) |> arrange(sort)  -> test2

pdf(file = "output/FCM_sub.pdf", width = 20, height = 8)
# Create a plot for F A I R separately
for(principle in unique(princ_meta$p)) {
  # filter the right principle
  test2_sub <- test2 |> semi_join(princ_meta |> filter(p== principle), join_by(sort))
  
  # create the annotation matrix
  annot_res <- test2_sub |> 
    select(q_res, sort) |> 
    left_join(princ_meta, join_by(sort)) |>
    column_to_rownames("q_res") |>
    select(type, sp, p)
  
  # create the matrix for pheatmap
  test3 <- test2_sub |> column_to_rownames("q_res") |> select(-res, -sort)
  
  # create the value matrix for the heatmap (used to display the values, but remove NAs)
  test3_disp <- test3
  test3_disp[is.na(test3_disp)] <- ""
  
  pheatmap(t(test3), scale = "none", cluster_rows = F, cluster_cols = F, 
           color = colorspace::sequential_hcl(palette = "Viridis", n = 4), breaks = c(-1:3),
           main = paste("FAIR Convergence Matrix:", FAIR_abbrv[principle]), display_numbers = t(test3_disp),
           labels_col = test2_sub$res, annotation_col = annot_res, gaps_col = bro_string_diff(annot_res$sp))
}
dev.off()
```

Plot everything together

```{r}
test |> pivot_wider(names_from = c, values_from = value) |> arrange(sort)  -> test2

pdf(file = "output/FCM.pdf", width = 8, height = 60)

  annot_res <- test2 |> 
    select(q_res, sort) |> 
    left_join(princ_meta, join_by(sort)) |>
    column_to_rownames("q_res") |>
    select(type, sp, p)

  test3 <- test2 |> column_to_rownames("q_res") |> select(-res, -sort)
  test3_disp <- test3
  test3_disp[is.na(test3_disp)] <- ""
  
  pheatmap(test3, scale = "none", cluster_rows = F, cluster_cols = F, 
           color = colorspace::sequential_hcl(palette = "Viridis", n = 4), breaks = c(-1:3),
           main = "FAIR Convergence Matrix", display_numbers = test3_disp,
           labels_row = test2$res, annotation_row = annot_res, gaps_row = bro_string_diff(annot_res$p))

dev.off()

pdf(file = "output/tFCM.pdf", width = 45, height = 6)

  pheatmap(t(test3), scale = "none", cluster_rows = F, cluster_cols = F, 
           color = colorspace::sequential_hcl(palette = "Viridis", n = 4), breaks = c(-1:3),
           main = "FAIR Convergence Matrix", display_numbers = t(test3_disp),
           labels_col = test2$res, annotation_col = annot_res, gaps_col = bro_string_diff(annot_res$p))

dev.off()
```
